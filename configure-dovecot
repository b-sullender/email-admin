#!/bin/bash

# --- Configure Dovecot Script ---
# This script copies conf files and configures Dovecot SSL for a given domain.

set -e  # Exit on any error

# Check if we are running as root
if [ "$(id -u)" -ne 0 ]; then
    echo "Please run as root 'sudo configure-dovecot'"
    exit 1
fi

# Include common functions
source /etc/email-admin/common.sh

# --- Install Dovecot ---
echo "Checking for Dovecot ..."
check_and_install "dovecot-core" "dovecot-imapd" "dovecot-pop3d" "dovecot-lmtpd" "dovecot-mysql"

# Prompt for domain
echo ""
echo "Enter the primary domain for this mail server."
echo "This domain will be used for SSL/TLS certificates and Dovecot configuration."
echo "It does not necessarily need to be a domain that will receive mail directly."
echo ""
read -p "Enter domain (e.g., example.com): " domain_name

if [[ -z "$domain_name" ]]; then
    echo "Error: Domain name cannot be empty."
    exit 1
fi

# Prompt for hostname
cat <<EOF
Enter the hostname for this mail server (optional)

This is useful if your domain uses multiple mail servers.
For example, you might have:
  - 'mail' for mail.example.com
  - 'mx1' for mx1.example.com
  - 'mx2' for mx2.example.com

If left empty, the domain will be used without a hostname.

EOF
read -p "Hostname (e.g. mail): " hostname

# If hostname is not empty, prepend it to the domain_name
if [[ -n "$hostname" ]]; then
    full_domain_name="${hostname}.${domain_name}"
else
    full_domain_name=${domain_name}
fi

echo "Configuring Dovecot for domain: ${full_domain_name}"

# Ensure /var/mail/vhosts exists
maildir="/var/mail/vhosts"
echo "Checking for $maildir"
if [ ! -d "$maildir" ]; then
    echo "Creating $maildir ..."
    mkdir -p "$maildir"
fi
chown -R vmail:vmail "$maildir"
chmod 2770 "$maildir"

# Ensure 'vmail' user exists
if ! id "vmail" &>/dev/null; then
    echo "Creating 'vmail' user ..."
    if ! useradd -r -m -d /var/mail/vmail -s /sbin/nologin vmail; then
        echo "Failed to create user 'vmail'." >&2
        exit 1
    fi
fi

# Ensure 'vmail' group exists
if ! getent group vmail >/dev/null; then
    echo "Creating 'vmail' group ..."
    groupadd vmail
fi

# Retrieve UID and GID
vmail_uid=$(id -u vmail)
vmail_gid=$(getent group vmail | cut -d: -f3)
echo "Using vmail UID: ${vmail_uid}, GID: ${vmail_gid}"

# Add dovecot user to the vmail group
echo "Adding dovecot user to vmail group ..."
usermod -aG vmail dovecot

# Ensure /etc/dovecot/passwd exists
passwd_file="/etc/dovecot/passwd"
echo "Checking for $passwd_file"
if [ ! -f "$passwd_file" ]; then
    echo "Creating $passwd_file ..."
    mkdir -p /etc/dovecot
    touch "$passwd_file"
fi
chown dovecot:dovecot "$passwd_file"
chmod 640 "$passwd_file"

# --- Check for conf.d files ---
echo "Checking for config files ..."
if [[ ! -d /etc/email-admin/dovecot/conf.d ]]; then
    echo "Error: Local directory '/etc/email-admin/dovecot/conf.d/' not found."
    exit 1
fi

# --- Copy conf.d files ---
echo "Copying configuration files to /etc/dovecot/conf.d/ ..."
cp -r /etc/email-admin/dovecot/conf.d/* /etc/dovecot/conf.d/

# Get TLS certificates
obtain_cert "$full_domain_name"

# Get dovecot user id
dovecot_uid=$(id -u dovecot)

# --- Write SSL configuration ---
echo "Writing /etc/dovecot/conf.d/10-ssl.conf ..."
bash -c "cat > /etc/dovecot/conf.d/10-ssl.conf" <<EOF
##
## SSL settings
##

# SSL/TLS support: yes, no, required. <doc/wiki/SSL.txt>
ssl = yes

# PEM encoded X.509 SSL/TLS certificate and private key. They're opened before
# dropping root privileges, so keep the key file unreadable by anyone but
# root. Included doc/mkcert.sh can be used to easily generate self-signed
# certificate, just make sure to update the domains in dovecot-openssl.cnf
ssl_cert = <${tls_fullchain}
ssl_key = <${tls_privkey}

# If key file is password protected, give the password here. Alternatively
# give it when starting dovecot with -p parameter. Since this file is often
# world-readable, you may want to place this setting instead to a different
# root owned 0600 file by using ssl_key_password = <path.
#ssl_key_password =

# PEM encoded trusted certificate authority. Set this only if you intend to use
# ssl_verify_client_cert=yes. The file should contain the CA certificate(s)
# followed by the matching CRL(s). (e.g. ssl_ca = </etc/ssl/certs/ca.pem)
#ssl_ca = 

# Require that CRL check succeeds for client certificates.
#ssl_require_crl = yes

# Directory and/or file for trusted SSL CA certificates. These are used only
# when Dovecot needs to act as an SSL client (e.g. imapc backend or
# submission service). The directory is usually /etc/ssl/certs in
# Debian-based systems and the file is /etc/pki/tls/cert.pem in
# RedHat-based systems. Note that ssl_client_ca_file isn't recommended with
# large CA bundles, because it leads to excessive memory usage.
#ssl_client_ca_dir =
ssl_client_ca_dir = /etc/ssl/certs
#ssl_client_ca_file =

# Require valid cert when connecting to a remote server
#ssl_client_require_valid_cert = yes

# Request client to send a certificate. If you also want to require it, set
# auth_ssl_require_client_cert=yes in auth section.
#ssl_verify_client_cert = no

# Which field from certificate to use for username. commonName and
# x500UniqueIdentifier are the usual choices. You'll also need to set
# auth_ssl_username_from_cert=yes.
#ssl_cert_username_field = commonName

# SSL DH parameters
# Generate new params with 'openssl dhparam -out /etc/dovecot/dh.pem 4096'
# Or migrate from old ssl-parameters.dat file with the command dovecot
# gives on startup when ssl_dh is unset.
ssl_dh = </usr/share/dovecot/dh.pem

# Minimum SSL protocol version to use. Potentially recognized values are SSLv3,
# TLSv1, TLSv1.1, TLSv1.2 and TLSv1.3, depending on the OpenSSL version used.
#
# Dovecot also recognizes values ANY and LATEST. ANY matches with any protocol
# version, and LATEST matches with the latest version supported by library.
ssl_min_protocol = TLSv1.2

# SSL ciphers to use, the default is:
#ssl_cipher_list = ALL:!kRSA:!SRP:!kDHd:!DSS:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK:!RC4:!ADH:!LOW@STRENGTH
# To disable non-EC DH, use:
#ssl_cipher_list = ALL:!DH:!kRSA:!SRP:!kDHd:!DSS:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK:!RC4:!ADH:!LOW@STRENGTH

# Colon separated list of elliptic curves to use. Empty value (the default)
# means use the defaults from the SSL library. P-521:P-384:P-256 would be an
# example of a valid value.
#ssl_curve_list =

# Prefer the server's order of ciphers over client's.
#ssl_prefer_server_ciphers = no

# SSL crypto device to use, for valid values run "openssl engine"
#ssl_crypto_device =

# SSL extra options. Currently supported options are:
#   compression - Enable compression.
#   no_ticket - Disable SSL session tickets.
#ssl_options =
EOF

# --- Restart Dovecot ---
echo "Restarting Dovecot ..."
systemctl restart dovecot

echo ""
echo "Dovecot has been configured for domain: ${full_domain_name}"
echo "Configuration files copied to: /etc/dovecot/conf.d/"
echo "SSL configuration saved to: /etc/dovecot/conf.d/10-ssl.conf"
echo ""
echo "Dovecot setup complete!"
