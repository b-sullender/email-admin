#!/bin/bash

# --- Configure Postfix Script ---
# This script sets up Postfix for a given domain with TLS, SASL, virtual mailboxes, and OpenDKIM.

set -e  # Exit on any error

# Check if we are running as root
if [ "$(id -u)" -ne 0 ]; then
    echo "Please run as root 'sudo configure-postfix'"
    exit 1
fi

# Include common functions
source /etc/email-admin/common.sh

# --- Install Postfix ---
echo "Checking for Postfix ..."
check_and_install "postfix" "postfix-mysql" "dnsutils" "curl"

# Prompt for domain
echo ""
echo "Enter the primary domain for this mail server."
echo "This domain will be used for SSL/TLS certificates and Postfix configuration."
echo "It does not necessarily need to be a domain that will receive mail directly."
echo ""
read -p "Enter domain (e.g., example.com): " domain_name

if [[ -z "$domain_name" ]]; then
    echo "Error: Domain name cannot be empty."
    exit 1
fi

# Prompt for hostname
cat <<EOF
Enter the hostname for this mail exchange server (optional)

This is useful if your mail room (Dovecot) uses multiple mail exchange servers.
For example, you might have:
  - 'mail' for mail.example.com
  - 'mx1' for mx1.example.com
  - 'mx2' for mx2.example.com

If left empty, the domain will be used without a hostname.

EOF
read -p "Hostname (e.g. mail): " hostname

# If hostname is not empty, prepend it to the domain_name
if [[ -n "$hostname" ]]; then
    full_domain_name="${hostname}.${domain_name}"
else
    full_domain_name=${domain_name}
fi

echo "Configuring Postfix for domain: ${full_domain_name}"

echo "Saving MX (mail exchange) name to /etc/mx_names"
echo "$full_domain_name" > /etc/mx_names

# Get the local system hostname
# This is the hostname configured on this machine,
# and may differ from the domain or mail server hostname.
local_hostname=$(hostname)

# --- Get public IP address ---
echo "Getting public IP address ..."
public_ip=$(curl -sf https://icanhazip.com)
if [[ -z "$public_ip" ]]; then
    echo "Could not automatically determine public IP."
    public_ip=""
fi

# --- Prompt user to confirm or override public IP ---
echo ""
if [[ -n "$public_ip" ]]; then
    echo "Detected public IP: $public_ip"
    echo "You can press Enter to use this IP, or enter a different one."
else
    echo "Please enter your public IP manually."
fi

read -p "Enter public IP: " input_ip
if [[ -n "$input_ip" ]]; then
    public_ip="$input_ip"
fi

# Ensure the user has provided an IP
while [[ -z "$public_ip" ]]; do
    echo "Public IP cannot be empty. Please enter a valid IP."
    read -p "Enter public IP: " input_ip
    public_ip="$input_ip"
done

echo "Using public IP: $public_ip"
echo ""

echo "Getting reverse DNS PTR ..."
reverse_dns_ptr=$(dig -x $public_ip +short)

# --- Prompt user to confirm or override reverse DNS PTR ---
echo ""
echo "Detected reverse DNS PTR: $reverse_dns_ptr"
echo "You can press Enter to use this PTR, or enter a different one."
read -p "Enter reverse DNS PTR: " input_ptr
if [[ -n "$input_ptr" ]]; then
    reverse_dns_ptr="$input_ptr"
fi
echo "Using reverse DNS PTR: $reverse_dns_ptr"
echo ""

# Set /etc/mailname to reverse DNS PTR
echo "Saving reverse DNS PTR name to /etc/mailname"
echo "$reverse_dns_ptr" > /etc/mailname

# --- Check for static configuration files ---
if [[ ! -d /etc/email-admin/postfix ]]; then
    echo "Error: Local directory '/etc/email-admin/postfix/' not found."
    exit 1
fi

# --- Copy configuration files ---
echo "Copying configuration files to /etc/postfix/ ..."
cp -r /etc/email-admin/postfix/* /etc/postfix/

# Get TLS certificates
obtain_cert "$full_domain_name"

# Get postfix user id and group id
postfix_uid=$(id -u postfix)
postfix_gid=$(id -g postfix)

# --- Write Postfix main.cf ---
echo "Writing /etc/postfix/main.cf ..."
cat > /etc/postfix/main.cf <<EOF
# ====================================================================
# Postfix main.cf - Unified configuration for Local + Virtual Mail
# ====================================================================

# --------------------------------------------------------------------
# Server identity and local mail defaults
# --------------------------------------------------------------------

# Domain appended to locally submitted mail without a domain
myorigin = ${local_hostname}

# Fully qualified hostname of this mail server, used in SMTP HELO/EHLO
myhostname = ${full_domain_name}

# Text shown when a client connects via SMTP
smtpd_banner = ${reverse_dns_ptr} ESMTP $mail_name (Debian/GNU)

# --------------------------------------------------------------------
# General mail system behavior
# --------------------------------------------------------------------

# Disable "you have mail" notifications
biff = no

# Prevent automatic appending of ".domain" to addresses
append_dot_mydomain = no

# Disable serving Postfix help pages
readme_directory = no

# Set Postfix compatibility defaults (version 3.6)
compatibility_level = 3.6

# Prevent mail to nonexistent addresses and backscatter
reject_unlisted_recipient = yes

# --------------------------------------------------------------------
# Local mail (system users)
# --------------------------------------------------------------------

# Domains delivered locally (system users)
mydestination = ${local_hostname}, localhost.localdomain, localhost

# Networks allowed to send mail without authentication
mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128

# Maximum mailbox size for local users (0 = unlimited)
mailbox_size_limit = 0

# Delimiter for recipient extensions (user+tag@host)
recipient_delimiter = +

# Listen on all network interfaces
inet_interfaces = all

# Enable both IPv4 and IPv6
inet_protocols = all

# --------------------------------------------------------------------
# TLS encryption
# --------------------------------------------------------------------

# Incoming SMTP server TLS certificate
smtpd_tls_cert_file = ${tls_cert}

# Incoming SMTP server private key
smtpd_tls_key_file = ${tls_privkey}

# CA chain for TLS verification
smtpd_tls_CAfile = ${tls_chain}

# TLS security level for incoming connections
smtpd_tls_security_level = encrypt

# TLS security level for outgoing connections
smtp_tls_security_level = encrypt

# CA path for outgoing TLS verification
smtp_tls_CApath = /etc/ssl/certs

# Cache database for TLS sessions
smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache

# --------------------------------------------------------------------
# SASL authentication via Dovecot
# --------------------------------------------------------------------

# Use Dovecot for SASL authentication
smtpd_sasl_type = dovecot

# Path to Dovecot auth socket
smtpd_sasl_path = private/auth
# Connecting to Dovecot remotely via TCP socket:
#smtpd_sasl_path = tcp:127.0.0.1:11125

# Enable SASL authentication in Postfix
smtpd_sasl_auth_enable = yes

# Require TLS for SASL authentication
smtpd_tls_auth_only = yes

# Allow broken SASL clients to authenticate
broken_sasl_auth_clients = yes

# Disallow anonymous and plaintext SASL methods
smtpd_sasl_security_options = noanonymous noplaintext
smtpd_sasl_tls_security_options = noanonymous

# Control who can relay mail through this server
smtpd_relay_restrictions = permit_mynetworks permit_sasl_authenticated defer_unauth_destination

# Additional recipient restrictions
smtpd_recipient_restrictions = permit_mynetworks permit_sasl_authenticated reject_unauth_destination

# --------------------------------------------------------------------
# Virtual mail (internet domains)
# --------------------------------------------------------------------

# List of domains served by this virtual mail host
virtual_mailbox_domains = hash:/etc/postfix/virtual_mailbox_domains
# Using a MySQL database:
#virtual_mailbox_domains = mysql:/etc/postfix/mysql_virtual_mailbox_domains.cf

# Map of virtual aliases and forwards
virtual_alias_maps = hash:/etc/postfix/virtual_alias_maps
# Using a MySQL database:
#virtual_alias_maps = mysql:/etc/postfix/mysql_virtual_alias_maps.cf

# Transport for virtual mail: LMTP handoff to Dovecot
virtual_transport = lmtp:unix:private/dovecot-lmtp
# Using remote LMTP to Dovecot:
#virtual_transport = lmtp:tcp:127.0.0.1:24

# Ensure each recipient is delivered individually to Dovecot
dovecot_destination_recipient_limit = 1

# --------------------------------------------------------------------
# OpenDKIM (mail signing)
# --------------------------------------------------------------------

# Milter used to sign outgoing mail
smtpd_milters = local:/var/run/opendkim/opendkim.sock
# Make sure Postfix can read/write the socket:
#   sudo usermod -aG opendkim postfix
# Example using TCP instead of a local Unix socket
#smtpd_milters = inet:localhost:8891

# Non-SMTP mail also passed to the same milter
non_smtpd_milters = $smtpd_milters

# Action to take if milter fails
milter_default_action = accept

# Milter protocol version
milter_protocol = 6

# --------------------------------------------------------------------
# End of main.cf
# --------------------------------------------------------------------
EOF

# --- Ensure virtual mailbox and alias files exist ---
echo "Checking virtual mailbox and alias files ..."

# Array of files to check
files=("/etc/postfix/virtual_mailbox_domains" "/etc/postfix/virtual_alias_maps")

for file in "${files[@]}"; do
    if [[ ! -f "$file" ]]; then
        echo "Creating $file ..."
        touch "$file"
        chown root:postfix "$file"
        chmod 644 "$file"
        echo "Created $file"
    fi
done

# Add postfix user to the opendkim group
echo "Adding postfix user to opendkim group ..."
usermod -aG opendkim postfix

# --- Reload Postfix ---
echo "Reloading Postfix ..."
postmap /etc/postfix/virtual_mailbox_domains
postmap /etc/postfix/virtual_alias_maps
systemctl restart postfix

echo "Postfix has been configured for domain: ${full_domain_name}"
echo "virtual_mailbox_domains: /etc/postfix/virtual_mailbox_domains"
echo "virtual_alias_maps: /etc/postfix/virtual_alias_maps"
echo "TLS cert: ${tls_cert}"
echo "TLS key: ${tls_key}"
echo "OpenDKIM milter: local:/var/run/opendkim/opendkim.sock"
echo ""
echo "DNS Records"
echo "------------------------------------------------------"
echo "Host/Name: ${full_domain_name}"
echo "Type: A"
echo "Value: ${public_ip}"
echo "------------------------------------------------------"
echo ""
echo "Postfix setup complete!"
